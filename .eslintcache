[{"C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\index.js":"1","C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\App.jsx":"2","C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\Button.jsx":"3","C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\Textarea.jsx":"4","C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\rows\\Row.jsx":"5","C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\digit.js":"6"},{"size":169,"mtime":1610503606078,"results":"7","hashOfConfig":"8"},{"size":8319,"mtime":1610686472430,"results":"9","hashOfConfig":"8"},{"size":318,"mtime":1610589947033,"results":"10","hashOfConfig":"8"},{"size":223,"mtime":1610673647468,"results":"11","hashOfConfig":"8"},{"size":501,"mtime":1610589823428,"results":"12","hashOfConfig":"8"},{"size":339,"mtime":1610679301951,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hh4v75",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\index.js",[],["28","29"],"C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\App.jsx",["30","31","32","33"],"import React from 'react';\r\nimport Textarea from \"./Textarea\";\r\nimport Row from \"./rows/Row\";\r\n\r\n\r\nvar firstNumber = [];\r\nvar secondNumber = [];\r\n\r\nvar arithmetic = [];\r\n\r\nvar digitOne;\r\nvar digitTwo = null;\r\n\r\n\r\n\r\nfunction App() {\r\n    var [screenNumber, setScreenNuber] = React.useState(\"\");\r\n\r\n\r\n    // Function for operation - + / *\r\n    function operate(firstDigit, secondDigit, operater) {\r\n\r\n        firstDigit = parseFloat(firstDigit);\r\n        secondDigit = parseFloat(secondDigit);\r\n        console.log(operater, firstDigit, secondDigit);\r\n        var result;\r\n        switch (operater) {\r\n            case \"+\":\r\n\r\n                result = (firstDigit + secondDigit);\r\n                break;\r\n            case \"*\":\r\n                result = (firstDigit * secondDigit);\r\n                break;\r\n            case \"/\":\r\n                result = firstDigit / secondDigit;\r\n                break;\r\n            case \"-\":\r\n                result = firstDigit - secondDigit;\r\n                break;\r\n            default:\r\n                return \"karan\";\r\n            //dndonol\r\n        }\r\n\r\n        digitOne = result;\r\n        firstNumber = result.toString().split(\"\");\r\n        secondNumber = [];\r\n        digitTwo = null;\r\n        console.log(result);\r\n        setScreenNuber(() => { return result });\r\n        return result;\r\n\r\n    }\r\n\r\n    //Function for changing array to string and than number\r\n    function arrayToString(numberArray) {\r\n        console.log(numberArray);\r\n        if (numberArray.includes(\"-\") === true) {\r\n            var outcome = numberArray.toString();\r\n\r\n            outcome = outcome.replace(/,/g, \"\");\r\n\r\n            outcome = parseFloat(outcome);\r\n\r\n            digitOne === undefined || null ? digitOne = \"-\" + outcome : digitTwo = \"-\" + outcome;\r\n            \r\n        } else {\r\n            var outcome = numberArray.toString();\r\n\r\n            outcome = outcome.replace(/,/g, \"\");\r\n\r\n            outcome = parseFloat(outcome);\r\n\r\n            digitOne === undefined || null ? digitOne = outcome : digitTwo = outcome;\r\n        }\r\n        \r\n\r\n    }\r\n\r\n\r\n    // function for when button is pressed\r\n    function calculate(value) {\r\n        if (typeof value === 'number') {\r\n\r\n            if (arithmetic.length === 0) {\r\n                firstNumber.push(value);\r\n                setScreenNuber(() => { return firstNumber.toString().replace(/,/g, \"\") });\r\n            } else {\r\n                secondNumber.push(value);\r\n                setScreenNuber(() => { return secondNumber.toString().replace(/,/g, \"\") });\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n            if (value === \"*\" || value === \"/\" || value === \"-\" || value === \"+\") {\r\n                arithmetic.push(value);\r\n\r\n\r\n\r\n                setScreenNuber((prevalue) => { return arithmetic[arithmetic.length - 1] });\r\n                if (digitOne === undefined) {\r\n\r\n\r\n                    arrayToString(firstNumber);\r\n                    \r\n                } else if (digitTwo === null) {\r\n                    if (secondNumber.length === 0) {\r\n\r\n                    } else {\r\n                        arrayToString(secondNumber);\r\n\r\n                        operate(digitOne, digitTwo, arithmetic[arithmetic.length - 2]);\r\n                    }\r\n\r\n                } else {\r\n\r\n                }\r\n            } else {\r\n\r\n            }\r\n\r\n\r\n            switch (value) {\r\n                case (\"=\"):\r\n                    if (secondNumber.length === 0) {\r\n\r\n                    } else {\r\n                        arrayToString(secondNumber);\r\n\r\n                        operate(digitOne, digitTwo, arithmetic[arithmetic.length - 1]);\r\n                    }\r\n\r\n\r\n                    break;\r\n                case (\"AC\"):\r\n                    digitTwo = null;\r\n                    digitOne = undefined;\r\n                    arithmetic = [];\r\n                    firstNumber = [];\r\n                    secondNumber = [];\r\n                    setScreenNuber(() => { return \"0\" });\r\n                    break;\r\n                case (\"xÂ²\"):\r\n                    setScreenNuber((prevalue) => {\r\n                        console.log(prevalue);\r\n                        return (prevalue * prevalue);\r\n                    });\r\n                    break;\r\n                case (\"+/-\"):\r\n                    setScreenNuber(prevalue => {\r\n                        if (prevalue > 0) {\r\n                            if (secondNumber.length === 0) {\r\n                                firstNumber.push(\"-\");\r\n                                console.log(digitOne);\r\n                                digitOne = arrayToString(firstNumber);\r\n                                console.log(digitOne);\r\n                                return \"-\" + prevalue;\r\n                            } else if (firstNumber.length === 0) {\r\n\r\n                            } else {\r\n                                secondNumber.push(\"-\");\r\n                                digitOne = arrayToString(firstNumber);\r\n                                return \"-\" + prevalue;\r\n                            }\r\n                        } else if (prevalue === 0) {\r\n\r\n                        } else if (prevalue < 0) {\r\n                            if (secondNumber.length === 0) {\r\n                                var x = \"-\";\r\n                                console.log(firstNumber);\r\n                                for (var i = 0; i < firstNumber.length; i++) {\r\n\r\n                                    if (firstNumber[i] === \"-\") {\r\n\r\n                                        firstNumber.splice(i, 1);\r\n                                    }\r\n\r\n                                }\r\n                                console.log(firstNumber);\r\n                                digitOne = firstNumber.toString().replace(/,/g, \"\");\r\n                                return firstNumber.toString().replace(/,/g, \"\");\r\n                            } else if (firstNumber.length === 0) {\r\n\r\n                            } else {\r\n                                var x = \"-\";\r\n\r\n                                for (var i = 0; i < secondNumber.length; i++) {\r\n\r\n                                    if (screenNumber[i] === \"-\") {\r\n\r\n                                        screenNumber.splice(i, 1);\r\n                                    }\r\n\r\n                                }\r\n                                digitOne = firstNumber.toString().replace(/,/g, \"\");\r\n                                return secondNumber.toString().replace(/,/g, \"\");\r\n                            }\r\n                        }\r\n                    })\r\n                    break;\r\n                case (\".\"):\r\n                    if (secondNumber.length === 0) {\r\n                        firstNumber.push(value);\r\n                        setScreenNuber(() => { return firstNumber.toString().replace(/,/g, \"\") });\r\n                    } else if (firstNumber.length === 0) {\r\n\r\n                    } else {\r\n                        secondNumber.push(value);\r\n                        \r\n                        setScreenNuber(() => { return secondNumber.toString().replace(/,/g, \"\") });\r\n                    }\r\n                    break;\r\n                case (\"cross\"):\r\n                    if (secondNumber.length === 0) {\r\n                        firstNumber.pop();\r\n                        setScreenNuber(() => { return firstNumber.toString().replace(/,/g, \"\") });\r\n                    } else if (firstNumber.length === 0) {\r\n\r\n                    } else {\r\n                        secondNumber.pop();\r\n                        setScreenNuber(() => { return secondNumber.toString().replace(/,/g, \"\") });\r\n                    }\r\n                    break;\r\n                default:\r\n                // code block\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 hide\">1</div>\r\n\r\n                <div className=\"col-12 col-md-6 calculater\">\r\n\r\n                    <Textarea class=\"display-area\" numberToShow={screenNumber} />\r\n\r\n\r\n                    <div className=\"container-fluid \">\r\n                        <Row clicked={calculate} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"col-md-3 hide\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\Button.jsx",[],"C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\Textarea.jsx",[],"C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\components\\rows\\Row.jsx",[],"C:\\Users\\HP-Elitebook\\OneDrive\\Desktop\\karan\\calculater\\src\\digit.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":69,"column":17,"nodeType":"40","messageId":"41","endLine":69,"endColumn":24},{"ruleId":"38","severity":1,"message":"42","line":187,"column":37,"nodeType":"40","messageId":"41","endLine":187,"endColumn":38},{"ruleId":"43","severity":1,"message":"44","line":187,"column":37,"nodeType":"40","messageId":"45","endLine":187,"endColumn":38},{"ruleId":"38","severity":1,"message":"46","line":189,"column":42,"nodeType":"40","messageId":"41","endLine":189,"endColumn":43},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-redeclare","'outcome' is already defined.","Identifier","redeclared","'x' is already defined.","no-unused-vars","'x' is assigned a value but never used.","unusedVar","'i' is already defined.","no-global-assign","no-unsafe-negation"]