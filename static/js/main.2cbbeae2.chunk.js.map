{"version":3,"sources":["components/Textarea.jsx","components/Button.jsx","digit.js","components/rows/Row.jsx","components/App.jsx","index.js"],"names":["Textarea","props","className","class","disabled","placeholder","numberToShow","Button","onClick","clicked","value","id","specialButton","allRows","Row","digitOne","result","map","row","index","firstNumber","secondNumber","arithmetic","digitTwo","App","React","useState","screenNumber","setScreenNuber","showOnScreen","givenArray","toString","replace","operate","firstDigit","secondDigit","operater","parseFloat","split","arrayToString","numberArray","outcome","includes","undefined","length","push","prevalue","console","log","digitoneToString","i","splice","a","pop","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cbbeae2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Textarea(props) {\r\n    return (\r\n\r\n            <input className={props.class} disabled placeholder={props.numberToShow} />\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Textarea;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button\r\n            onClick={() => {props.clicked(props.value)}}\r\n            value={props.value}\r\n            className=\"btn cal-btn\" id={props.specialButton}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Button;","const allRows = [\r\n\r\n    {value: \"AC\"},{value: \"xÂ²\"},{value: \"cross\"},{value: \"/\"},\r\n    {value: 7},{value: 8},{value: 9},{value: \"*\"},\r\n    {value: 4},{value: 5},{value: 6},{value: \"+\"},\r\n    {value: 1},{value: 2},{value: 3},{value: \"-\"},\r\n    {value: \"+/-\"},{value: 0},{value: \".\"},{value: \"=\"}\r\n\r\n\r\n];\r\n\r\nexport  default allRows;    \r\n","import React from 'react';\r\nimport Button from \"../Button\";\r\nimport allRows from \"../../digit\";\r\n\r\nfunction Row(props) {\r\n\r\n    \r\n    return (\r\n\r\n        <div className=\"row \">\r\n            {allRows.map((row, index) => {\r\n                \r\n                    if (row.value === \"*\" || row.value === \"=\" || row.value === \"-\" || row.value === \"+\" || row.value === \"/\") {\r\n                       return(<div className=\"col-3 cal-row\" key={index}>\r\n                        <Button specialButton=\"operater\" clicked={props.clicked} value={row.value} />\r\n                    </div>) \r\n                    } else {\r\n                        return(<div className=\"col-3 cal-row\" key={index}>\r\n                        <Button clicked={props.clicked} value={row.value} />\r\n                    </div>)\r\n                    }\r\n\r\n                ;\r\n            })}\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Row;","import React from 'react';\r\nimport Textarea from \"./Textarea\";\r\nimport Row from \"./rows/Row\";\r\n\r\n\r\nvar firstNumber = [];\r\nvar secondNumber = [];\r\n\r\nvar arithmetic = [];\r\n\r\nvar digitOne;\r\nvar digitTwo = null;\r\n\r\nvar result;\r\n\r\nfunction App() {\r\n    // Change input placeholder variable to change on click\r\n    var [screenNumber, setScreenNuber] = React.useState(\"\");\r\n\r\n\r\n    function showOnScreen(givenArray) {\r\n        return givenArray.toString().replace(/,/g, \"\");\r\n    }\r\n\r\n\r\n\r\n    // Function for operation - + / *\r\n    function operate(firstDigit, secondDigit, operater) {\r\n        firstDigit = parseFloat(firstDigit);\r\n        secondDigit = parseFloat(secondDigit);\r\n        switch (operater) {\r\n            case \"+\":\r\n                result = (firstDigit + secondDigit);\r\n                break;\r\n            case \"*\":\r\n                result = (firstDigit * secondDigit);\r\n                break;\r\n            case \"/\":\r\n                result = firstDigit / secondDigit;\r\n                break;\r\n            case \"-\":\r\n                result = firstDigit - secondDigit;\r\n                break;\r\n            default:\r\n                return \"karan\";\r\n        }\r\n        digitOne = result;\r\n        firstNumber = result.toString().split(\"\");\r\n        secondNumber = [];\r\n        digitTwo = null;\r\n        setScreenNuber(() => { return result });\r\n        return result;\r\n    }\r\n\r\n    //Function for changing array to string and than number and negative to postive number\r\n    function arrayToString(numberArray) {\r\n\r\n        var outcome = numberArray.toString();\r\n        outcome = outcome.replace(/,/g, \"\");\r\n        outcome = parseFloat(outcome);\r\n\r\n        if (numberArray.includes(\"-\") === true) {\r\n            digitOne === undefined || null ? digitOne = \"-\" + outcome : digitTwo = \"-\" + outcome;\r\n        } else {\r\n            digitOne === undefined || null ? digitOne = outcome : digitTwo = outcome;\r\n        }\r\n    }\r\n\r\n\r\n    // function for when button is pressed\r\n    function calculate(value) {\r\n\r\n        if (typeof value === 'number') {\r\n\r\n            if (arithmetic.length === 0) {\r\n                firstNumber.push(value);\r\n                setScreenNuber(() => { return showOnScreen(firstNumber); });\r\n            } else {\r\n                secondNumber.push(value);\r\n                setScreenNuber(() => { return showOnScreen(secondNumber); });\r\n            }\r\n\r\n\r\n        } else {\r\n\r\n            if (value === \"*\" || value === \"/\" || value === \"-\" || value === \"+\") {\r\n                arithmetic.push(value);\r\n                setScreenNuber((prevalue) => { return arithmetic[arithmetic.length - 1] });\r\n                if (digitOne === undefined) {\r\n                    arrayToString(firstNumber);\r\n                } else if (digitTwo === null) {\r\n                    if (secondNumber.length === 0) {\r\n                    } else {\r\n                        arrayToString(secondNumber);\r\n                        operate(digitOne, digitTwo, arithmetic[arithmetic.length - 2]);\r\n                    }\r\n                } else {\r\n                }\r\n            } else {\r\n            }\r\n\r\n\r\n            switch (value) {\r\n\r\n                case (\"=\"):\r\n                    if (secondNumber.length === 0) {\r\n                    } else {\r\n                        arrayToString(secondNumber);\r\n                        operate(digitOne, digitTwo, arithmetic[arithmetic.length - 1]);\r\n                    }\r\n                    break;\r\n\r\n                case (\"AC\"):\r\n                    digitTwo = null;\r\n                    digitOne = undefined;\r\n                    arithmetic = [];\r\n                    firstNumber = [];\r\n                    secondNumber = [];\r\n                    setScreenNuber(() => { return \"0\" });\r\n                    break;\r\n\r\n                case (\"xÂ²\"):\r\n                    setScreenNuber((prevalue) => {\r\n                        console.log(prevalue);\r\n                        digitOne = (prevalue * prevalue);\r\n                        var digitoneToString = digitOne.toString();\r\n                        firstNumber = digitoneToString.split(\"\");\r\n                            digitTwo = null;\r\n                        return (digitOne);\r\n                    });\r\n                    break;\r\n\r\n                case (\"+/-\"):\r\n                    setScreenNuber(prevalue => {\r\n                        if (prevalue > 0) {\r\n                            if (secondNumber.length === 0) {\r\n                                firstNumber.push(\"-\");\r\n                                digitOne = arrayToString(firstNumber);\r\n                                return \"-\" + prevalue;\r\n                            } else if (firstNumber.length === 0) {\r\n                            } else {\r\n                                secondNumber.push(\"-\");\r\n                                digitOne = arrayToString(firstNumber);\r\n                                return \"-\" + prevalue;\r\n                            }\r\n                        } else if (prevalue === 0) {\r\n\r\n                        } else if (prevalue < 0) {\r\n                            if (secondNumber.length === 0) {\r\n                                \r\n                                console.log(firstNumber);\r\n                                for (var i = 0; i < firstNumber.length; i++) {\r\n                                    if (firstNumber[i] === \"-\") {\r\n                                        firstNumber.splice(i, 1);\r\n                                    }\r\n                                }\r\n                                digitOne = firstNumber.toString().replace(/,/g, \"\");\r\n                                return firstNumber.toString().replace(/,/g, \"\");\r\n                            } else if (firstNumber.length === 0) {\r\n\r\n                            } else {\r\n                                \r\n\r\n                                for (var a = 0; a < secondNumber.length; a++) {\r\n\r\n                                    if (screenNumber[a] === \"-\") {\r\n\r\n                                        screenNumber.splice(a, 1);\r\n                                    }\r\n\r\n                                }\r\n                                digitOne = showOnScreen(firstNumber);\r\n                                return showOnScreen(secondNumber);\r\n                            }\r\n                        }\r\n                    })\r\n                    break;\r\n\r\n\r\n                case (\".\"):\r\n                    if (secondNumber.length === 0) {\r\n                        firstNumber.push(value);\r\n                        setScreenNuber(() => { return showOnScreen(firstNumber); });\r\n                    } else if (firstNumber.length === 0) {\r\n\r\n                    } else {\r\n                        secondNumber.push(value);\r\n                        setScreenNuber(() => { return showOnScreen(secondNumber); });\r\n                    }\r\n                    break;\r\n\r\n                case (\"cross\"):\r\n                    if (secondNumber.length === 0) {\r\n                        firstNumber.pop();\r\n                        digitOne = parseFloat(showOnScreen(firstNumber));\r\n                        setScreenNuber(() => { return showOnScreen(firstNumber); });\r\n                    } else if (firstNumber.length === 0) {\r\n\r\n                    } else {\r\n                        secondNumber.pop();\r\n                        setScreenNuber(() => { return showOnScreen(secondNumber); });\r\n                    }\r\n                    break;\r\n                default:\r\n                // code block\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 hide\">1</div>\r\n\r\n                <div className=\"col-12 col-md-6 calculater\">\r\n\r\n                    <Textarea class=\"display-area\" numberToShow={screenNumber} />\r\n\r\n\r\n                    <div className=\"container button-area\">\r\n                        <Row clicked={calculate} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"col-md-3 hide\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;","// eslint-disable-next-line\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\n\nReactDOM.render(\n\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}